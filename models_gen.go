// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package charts

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type DataPoint interface {
	IsDataPoint()
}

type Meta struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type MetaInput struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type NewLineGraph struct {
	Description *string           `json:"description"`
	Data        []*PairPointInput `json:"data"`
}

type NewPieGraph struct {
	Description *string          `json:"description"`
	Data        []*PiePointInput `json:"data"`
}

type NewTimeseriesGraph struct {
	Description *string           `json:"description"`
	Data        []*TimePointInput `json:"data"`
}

type PairPoint struct {
	X    float64 `json:"x"`
	Y    float64 `json:"y"`
	Meta []*Meta `json:"meta"`
}

func (PairPoint) IsDataPoint() {}

type PairPointInput struct {
	X    float64      `json:"x"`
	Y    float64      `json:"y"`
	Meta []*MetaInput `json:"meta"`
}

type PiePoint struct {
	Percent float64 `json:"percent"`
	Meta    []*Meta `json:"meta"`
}

func (PiePoint) IsDataPoint() {}

type PiePointInput struct {
	Percent float64      `json:"percent"`
	Meta    []*MetaInput `json:"meta"`
}

type TimePoint struct {
	Timestamp time.Time `json:"timestamp"`
	Value     float64   `json:"value"`
	Meta      []*Meta   `json:"meta"`
}

func (TimePoint) IsDataPoint() {}

type TimePointInput struct {
	Timestamp time.Time    `json:"timestamp"`
	Value     float64      `json:"value"`
	Meta      []*MetaInput `json:"meta"`
}

type GraphType string

const (
	GraphTypeLine       GraphType = "LINE"
	GraphTypePie        GraphType = "PIE"
	GraphTypeTimeseries GraphType = "TIMESERIES"
)

var AllGraphType = []GraphType{
	GraphTypeLine,
	GraphTypePie,
	GraphTypeTimeseries,
}

func (e GraphType) IsValid() bool {
	switch e {
	case GraphTypeLine, GraphTypePie, GraphTypeTimeseries:
		return true
	}
	return false
}

func (e GraphType) String() string {
	return string(e)
}

func (e *GraphType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GraphType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GraphType", str)
	}
	return nil
}

func (e GraphType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
